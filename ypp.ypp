%{
#include "hpp.hpp"
%}
%defines %union { Sim*o; }
%token <o> SIM				/* scalars: simbol */
%token <o> LQ RQ			/* brackets: [ ] */
%token <o> EQ AT			/* operators: = @ */
%token <o> ADD				/* operators: + - * / ^ */
%type <o> ex list

%left EQ
%left AT
%%
REPL	: | REPL ex 	{ W($2->eval(env)); W("\n"); } ;
ex		: SIM
		| LQ list RQ	{ $$=$2; }
		| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
;
list	:				{ $$=new List(); }
		| list ex		{ $$=$1; $$->push($2); }
%%
